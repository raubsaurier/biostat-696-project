prior.var.beta = NULL,
prior.nu2 = NULL,
prior.tau2 = NULL,
verbose = TRUE)
env_dismap_gau = S.CARleroux(formula = asthma_count/total_population) ~  asthma_sub$meanAQI.PM2.5 + asthma_sub$meanAQI.Ozone +asthma_sub$meanAQI.Other, W=W,
family = "gaussian",
burnin = 50000,
n.sample = 200000,
thin = 1,
prior.mean.beta = NULL,
prior.var.beta = NULL,
prior.nu2 = NULL,
prior.tau2 = NULL,
verbose = TRUE)
env_dismap_gau = S.CARleroux(formula = asthma_count/total_population) ~ asthma_sub$meanAQI.PM2.5 + asthma_sub$meanAQI.Ozone +asthma_sub$meanAQI.Other, W=W,
family = "gaussian",
burnin = 50000,
n.sample = 200000,
thin = 1,
prior.mean.beta = NULL,
prior.var.beta = NULL,
prior.nu2 = NULL,
prior.tau2 = NULL,
verbose = TRUE)
env_dismap_gau = S.CARleroux(formula = (asthma_count/total_population) ~ asthma_sub$meanAQI.PM2.5 + asthma_sub$meanAQI.Ozone +asthma_sub$meanAQI.Other, W=W,
family = "gaussian",
burnin = 50000,
n.sample = 200000,
thin = 1,
prior.mean.beta = NULL,
prior.var.beta = NULL,
prior.nu2 = NULL,
prior.tau2 = NULL,
verbose = TRUE)
env_dismap_gau$summary.results
0.0354 + 0.0008
socio_dismap_gau = S.CARleroux(formula = asthma_count/total_population~
asthma_sub$pct_black + asthma_sub$pct_high_school,
W=W,
family = "gaussian",
burnin = 50000,
n.sample = 200000,
thin = 1,
prior.mean.beta = NULL,
prior.var.beta = NULL,
prior.nu2 = NULL,
prior.tau2 = NULL,
verbose = TRUE)
env_dismap = S.CARleroux(formula = asthma_count/total_population ~
asthma_sub$meanAQI.PM2.5 + asthma_sub$meanAQI.Ozone +asthma_sub$meanAQI.Other,
W=W,
family = "gaussian",
burnin = 50000,
n.sample = 200000,
thin = 1,
prior.mean.beta = NULL,
prior.var.beta = NULL,
prior.nu2 = NULL,
prior.tau2 = NULL,
verbose = TRUE)
### Traceplots for the beta parameters and spatial parameters:
## function to get traceplots of the parameters
environ_betas <- c("intercept","meanAQI.PM2.5", "meanAQI.Ozone") #intercept + covariates
colnames(env_dismap$samples$beta) <- betas
## for loop to make the traceplots + density plots of the betas
for(i in 1:length(environ_betas)){
traceplot(env_dismap$samples$beta[,i], main=paste0("Trace of ",environ_betas[i]))
plot(density(env_dismap$samples$beta[,i]), main=paste0("Density of ",environ_betas[i]))
}
## traceplots + density plots of the spatial parameters
traceplot(env_dismap$samples$phi, main="Traceplot of Phi")
plot(density(env_dismap$samples$phi), main="Density of Phi")
traceplot(env_dismap$samples$tau2)
env_dismap$summary.results
# PM2.5: non-significant based on the 95% credible interval. Overall, PM2.5 is positively related to asthma prevalence
# ozone: non-significant based on the 95% credible interval. Overall, ozone concentration is positively related to asthma prevalence
# tau^2: measure of spatial variation. The estimate is positive suggesting that we have more events than what we would expect randomly
# posterior median
env_samples = env_dismap$samples$phi
env_median = as.numeric(apply(env_samples, 2, median))
plotclr = brewer.pal(4, "RdBu")[4:1]
class = classIntervals(env_median, 4,
style = "fixed",
fixedBreaks = c(-.12, -.06, 0, .06, .12))
colcode = findColours(class, plotclr)
plot(US.poly, border = "black", axes = TRUE, main = "Spatial Random Effects of Environmental Model\nPosterior Median")
plot(US.poly, col = colcode, add = TRUE)
legend(x = "bottomright", legend = c("[-.12, -.06)", "[-.06, 0)", "[0, .06)", "[.06, .12]"),
fill = plotclr, cex = .75, ncol = 1, bty = "n")
# posterior 95% lower confidence interval bound
env_lower = as.numeric(apply(env_samples, 2, quantile, .025))
plotclr = brewer.pal(4, "Blues")[4:1]
class = classIntervals(env_lower, 4,
style = "fixed",
fixedBreaks = c(-.27, -.20, -.14, 0, .005))
colcode = findColours(class, plotclr)
plot(US.poly, border = "black", axes = TRUE, main = "Spatial Random Effects of Environmental Model\nLower Bound")
plot(US.poly, col = colcode, add = TRUE)
legend(x = "bottomright", legend = c("[-.27, -.20)", "[-.20, -.14)", "[-.14, 0)", "[0, .005]"),
fill = plotclr, cex = .75, ncol = 1, bty = "n")
env_upper = as.numeric(apply(env_samples, 2, quantile, .975))
plotclr = brewer.pal(4, "Reds")[1:4]
class = classIntervals(env_upper, 4,
style = "fixed",
fixedBreaks = c(-.005, 0, .15, .22, .31))
colcode = findColours(class, plotclr)
plot(US.poly, border = "black", axes = TRUE, main = "Spatial Random Effects of Environmental Model\nUpper Bound")
plot(US.poly, col = colcode, add = TRUE)
legend(x = "bottomright", legend = c("[-.005, 0)", "[0, .15)", "[.15, .22)", "[.22, .31]"),
fill = plotclr, cex = .75, ncol = 1, bty = "n")
# run bayesian disease mapping model
health_dismap = S.CARleroux(formula = asthma_count/total_population ~
asthma_sub$obesity_rate_2016 + asthma_sub$pct_daily_smokers,
W=W,
family = "gaussian",
rho = 1,
burnin = 50000,
n.sample = 200000,
thin = 1,
prior.mean.beta = NULL,
prior.var.beta = NULL,
prior.nu2 = NULL,
prior.tau2 = NULL,
verbose = TRUE)
health_dismap$summary.results
# run bayesian disease mapping model
health_dismap = S.CARleroux(formula = asthma_count/total_population ~
asthma_sub$obesity_rate_2016 + asthma_sub$pct_daily_smokers,
W=W,
family = "gaussian",
rho = 1,
burnin = 50000,
n.sample = 200000,
thin = 1,
prior.mean.beta = NULL,
prior.var.beta = NULL,
prior.nu2 = NULL,
prior.tau2 = NULL,
verbose = TRUE)
health_samples = health_dismap$samples$phi
health_median = as.numeric(apply(health_samples, 2, median))
plotclr = brewer.pal(4, "RdBu")[4:1]
class = classIntervals(health_median, 4,
style = "fixed",
fixedBreaks = c(-.12, -.06, 0, .06, .12))
colcode = findColours(class, plotclr)
plot(US.poly, border = "black", axes = TRUE, main = "Spatial Random Effects of Health Model\nPosterior Median")
plot(US.poly, col = colcode, add = TRUE)
legend(x = "bottomright", legend = c("[-.12, -.06)", "[-.06, 0)", "[0, .06)", "[.06, .12]"),
fill = plotclr, cex = .75, ncol = 1, bty = "n")
health_lower = as.numeric(apply(health_samples, 2, quantile, .025))
plotclr = brewer.pal(4, "Blues")[4:1]
class = classIntervals(health_lower, 4,
style = "fixed",
fixedBreaks = c(-.27, -.20, -.14, -.08, 0))
colcode = findColours(class, plotclr)
plot(US.poly, border = "black", axes = TRUE, main = "Spatial Random Effects of Health Model\nLower Bound")
plot(US.poly, col = colcode, add = TRUE)
legend(x = "bottomright", legend = c("[-.27, -.20)", "[-.20, -.14)", "[-.14, -.08)", "[-.08, 0]"),
fill = plotclr, cex = .75, ncol = 1, bty = "n")
# All of the states have a negative lower bound of their spatial random effects
# posterior 95% upper confidence interval bound
health_upper = as.numeric(apply(health_samples, 2, quantile, .975))
plotclr = brewer.pal(4, "Blues")[4:1]
class = classIntervals(health_lower, 4,
style = "fixed",
fixedBreaks = quantile(health_lower))
colcode = findColours(class, plotclr)
plot(US.poly, border = "black", axes = TRUE, main = "Spatial Random Effects of Health Model\nLower Bound")
plot(US.poly, col = colcode, add = TRUE)
legend(x = "bottomright", legend = c("[-.27, -.20)", "[-.20, -.14)", "[-.14, -.08)", "[-.08, 0]"),
fill = plotclr, cex = .75, ncol = 1, bty = "n")
plotclr = brewer.pal(4, "Blues")[4:1]
class = classIntervals(health_lower, 4,
style = "fixed",
fixedBreaks = quantile(health_lower))
colcode = findColours(class, plotclr)
plot(US.poly, border = "black", axes = TRUE, main = "Spatial Random Effects of Health Model\nLower Bound")
plot(US.poly, col = colcode, add = TRUE)
legend(x = "bottomright",
fill = plotclr, cex = .75, ncol = 1, bty = "n")
plotclr = brewer.pal(4, "Blues")[4:1]
class = classIntervals(health_lower, 4,
style = "fixed",
fixedBreaks = quantile(health_lower))
colcode = findColours(class, plotclr)
plot(US.poly, border = "black", axes = TRUE, main = "Spatial Random Effects of Health Model\nLower Bound")
plot(US.poly, col = colcode, add = TRUE)
legend(x = "bottomright", legend = quantile(health_lower)),
fill = plotclr, cex = .75, ncol = 1, bty = "n")
# All of the states have a negative lower bound of their spatial random effects
plotclr = brewer.pal(4, "Blues")[4:1]
class = classIntervals(health_lower, 4,
style = "fixed",
fixedBreaks = quantile(health_lower))
colcode = findColours(class, plotclr)
plot(US.poly, border = "black", axes = TRUE, main = "Spatial Random Effects of Health Model\nLower Bound")
plot(US.poly, col = colcode, add = TRUE)
legend(x = "bottomright", legend = quantile(health_lower),
fill = plotclr, cex = .75, ncol = 1, bty = "n")
# All of the states have a negative lower bound of their spatial random effects
plotclr = brewer.pal(4, "Blues")
class = classIntervals(health_lower, 4,
style = "fixed",
fixedBreaks = quantile(health_lower))
colcode = findColours(class, plotclr)
plot(US.poly, border = "black", axes = TRUE, main = "Spatial Random Effects of Health Model\nLower Bound")
plot(US.poly, col = colcode, add = TRUE)
legend(x = "bottomright", legend = quantile(health_lower),
fill = plotclr, cex = .75, ncol = 1, bty = "n")
health_breaks <- cut(health_samples,2, quantile)
quantile(health_samples)
??qnn.test
rm(list=ls())
library(baker)
library(lubridate)
library(rjags)
library(R2jags)
library(ggplot2)
library(scales)
library(reshape)
library(jcolors)
library(Slurm)
#Get taskid from slurm
taskid <- slurm.array_task_id()
##----------------------------
### set up variables   ###
##----------------------------
J = 6                         # number of causes
N.SITE = 7                 # 3/20 -> change from 7 sites to 2 sites
cause_list = c(LETTERS[1:J])  # cause list - each letter stands for one cause
K = 1                         # number of subclasses
lambda = c(1,0)               # subclass weights for control group --> changed this so that
# it would take different TPR/FPR rates
eta = c(1,0)                  # subclass weights for case group --> same change to this
N = 300                       # number of subjects for control/case group
# etiology for all sites
# these are the  truth values for each site/pathogen
etiology_allsites = list(c(0.5,0.2,0.15,0.05,0.05,0.05),
c(0.2,0.5,0.15,0.05,0.05,0.05),
c(0.2,0.15,0.5,0.05,0.05,0.05),
c(0.2,0.15,0.05,0.5,0.05,0.05),
c(0.2,0.15,0.05,0.05,0.5,0.05),
c(0.2,0.15,0.05,0.05,0.05,0.5),
c(0.05,0.2,0.15,0.5,0.05,0.05))
# etiology only focusing on 2 sites
# etiology_allsites = list(c(0.5,0.2,0.15,0.05,0.05,0.05),
#                        c(0.05,0.2,0.15,0.5,0.05,0.05)) # site 2 and site 7
# FPR for MBS1 for all sites (7 site scenario)
PsiBS_MBS1_allsites = list(c(0.45, 0.45, 0.45,0.45,0.45, 0.45),
c(0.45, 0.45, 0.45,0.45,0.45, 0.45),
c(0.45, 0.45, 0.45,0.45,0.45, 0.45),
c(0.45, 0.45, 0.45,0.45,0.45, 0.45),
c(0.45, 0.45, 0.45,0.45,0.45, 0.45),
c(0.45, 0.45, 0.45,0.45,0.45, 0.45),
c(0.45, 0.45, 0.45,0.45,0.45, 0.45))
####  2 sites  scenario #####
# PsiBS_MBS1_allsites = list(c(0.5,0.5,0.15,0.2,0.2,0.2),
#                            c(0.1,0.1,0.15,0.2,0.2,0.2))
# this is a function that creates a list of the parameters for the model
set.seed(201910222) # change seed to 2/22/19
data_nplcm_list = lapply(1:N.SITE,function(siteID){
set_parameter <- list( # list of the parameters that can be specified
cause_list      = cause_list,
etiology        = etiology_allsites[[siteID]],
pathogen_BrS    = LETTERS[1:J],
SS = T, #we have SS information as well as BrS
pathogen_SS     = LETTERS[1:3], # 4/18 -> change to 3
meas_nm         = list(MBS = c("MBS1"),MSS=c("MSS1")),
Lambda          = lambda,               # contral subclass weight for BrS
Eta             = t(replicate(J,eta)),  # case subclass weight for BrS
PsiBS           = cbind(PsiBS_MBS1_allsites[[siteID]],PsiBS_MBS1_allsites[[siteID]]), # FPR
PsiSS           = cbind(rep(0,J),rep(0,J)),
ThetaBS         = cbind(c(0.55,0.55,0.55,0.55,0.55,0.55),     # TPR for MBS1
c(0.95,0.95,0.95,0.95,0.95,0.95)),
ThetaSS         = cbind(c(0.2,0.2,0.2,0.2,0.2,0.2), # TPS for MSS1 -> #4/18 - change to 0.2
c(0.05,0.05,0.05,0.05,0.05,0.05)),
Nu      =     N,
Nd      =     N
)
simu_out   <- simulate_nplcm(set_parameter) # pass the true model parameters into a simulation function
data_nplcm <- simu_out$data_nplcm #simulation data using the above parameters
data_nplcm$X = data.frame(SITE=rep(siteID,(set_parameter$Nu+set_parameter$Nu)))      # set X as a data frame containing SITE
return(data_nplcm)
})
# put cases on top of controls
data_nplcm_order = unlist(lapply(1:N.SITE,function(i) ((i-1)*2*N+1):((i-1)*2*N+N)))
data_nplcm_order = c(data_nplcm_order, setdiff(1:(N*2*N.SITE),data_nplcm_order))
data_nplcm = list(Mobs=list(MBS = list(MBS1 = Reduce(rbind, lapply(data_nplcm_list, function(l) l$Mobs$MBS$MBS1))[data_nplcm_order,]),
MSS = list(MSS1 = Reduce(rbind, lapply(data_nplcm_list, function(l) l$Mobs$MSS$MSS1))[data_nplcm_order,]),
MGS=NULL),
Y = Reduce(c, lapply(data_nplcm_list, function(l) l$Y))[data_nplcm_order],
X = data.frame(SITE=Reduce(rbind, lapply(data_nplcm_list, function(l) l$X))[data_nplcm_order,]))
rm(list=ls())
library(baker)
library(lubridate)
library(rjags)
library(R2jags)
library(ggplot2)
library(scales)
library(reshape)
library(jcolors)
library(Slurm)
#Get taskid from slurm
taskid <- slurm.array_task_id()
##----------------------------
### set up variables   ###
##----------------------------
J = 6                         # number of causes
N.SITE = 7                 # 3/20 -> change from 7 sites to 2 sites
cause_list = c(LETTERS[1:J])  # cause list - each letter stands for one cause
K = 1                         # number of subclasses
lambda = c(1,0)               # subclass weights for control group --> changed this so that
# it would take different TPR/FPR rates
eta = c(1,0)                  # subclass weights for case group --> same change to this
N = 300                       # number of subjects for control/case group
# etiology for all sites
# these are the  truth values for each site/pathogen
etiology_allsites = list(c(0.5,0.2,0.15,0.05,0.05,0.05),
c(0.2,0.5,0.15,0.05,0.05,0.05),
c(0.2,0.15,0.5,0.05,0.05,0.05),
c(0.2,0.15,0.05,0.5,0.05,0.05),
c(0.2,0.15,0.05,0.05,0.5,0.05),
c(0.2,0.15,0.05,0.05,0.05,0.5),
c(0.05,0.2,0.15,0.5,0.05,0.05))
# etiology only focusing on 2 sites
# etiology_allsites = list(c(0.5,0.2,0.15,0.05,0.05,0.05),
#                        c(0.05,0.2,0.15,0.5,0.05,0.05)) # site 2 and site 7
# FPR for MBS1 for all sites (7 site scenario)
PsiBS_MBS1_allsites = list(c(0.45, 0.45, 0.45,0.45,0.45, 0.45),
c(0.45, 0.45, 0.45,0.45,0.45, 0.45),
c(0.45, 0.45, 0.45,0.45,0.45, 0.45),
c(0.45, 0.45, 0.45,0.45,0.45, 0.45),
c(0.45, 0.45, 0.45,0.45,0.45, 0.45),
c(0.45, 0.45, 0.45,0.45,0.45, 0.45),
c(0.45, 0.45, 0.45,0.45,0.45, 0.45))
####  2 sites  scenario #####
# PsiBS_MBS1_allsites = list(c(0.5,0.5,0.15,0.2,0.2,0.2),
#                            c(0.1,0.1,0.15,0.2,0.2,0.2))
# this is a function that creates a list of the parameters for the model
set.seed(201910222) # change seed to 2/22/19
data_nplcm_list = lapply(1:N.SITE,function(siteID){
set_parameter <- list( # list of the parameters that can be specified
cause_list      = cause_list,
etiology        = etiology_allsites[[siteID]],
pathogen_BrS    = LETTERS[1:J],
SS = T, #we have SS information as well as BrS
pathogen_SS     = LETTERS[1:3], # 4/18 -> change to 3
meas_nm         = list(MBS = c("MBS1"),MSS=c("MSS1")),
Lambda          = lambda,               # contral subclass weight for BrS
Eta             = t(replicate(J,eta)),  # case subclass weight for BrS
PsiBS           = cbind(PsiBS_MBS1_allsites[[siteID]],PsiBS_MBS1_allsites[[siteID]]), # FPR
PsiSS           = cbind(rep(0,J),rep(0,J)),
ThetaBS         = cbind(c(0.55,0.55,0.55,0.55,0.55,0.55),     # TPR for MBS1
c(0.95,0.95,0.95,0.95,0.95,0.95)),
ThetaSS         = cbind(c(0.2,0.2,0.2,0.2,0.2,0.2), # TPS for MSS1 -> #4/18 - change to 0.2
c(0.05,0.05,0.05,0.05,0.05,0.05)),
Nu      =     N,
Nd      =     N
)
simu_out   <- simulate_nplcm(set_parameter) # pass the true model parameters into a simulation function
data_nplcm <- simu_out$data_nplcm #simulation data using the above parameters
data_nplcm$X = data.frame(SITE=rep(siteID,(set_parameter$Nu+set_parameter$Nu)))      # set X as a data frame containing SITE
return(data_nplcm)
})
# put cases on top of controls
data_nplcm_order = unlist(lapply(1:N.SITE,function(i) ((i-1)*2*N+1):((i-1)*2*N+N)))
data_nplcm_order = c(data_nplcm_order, setdiff(1:(N*2*N.SITE),data_nplcm_order))
data_nplcm = list(Mobs=list(MBS = list(MBS1 = Reduce(rbind, lapply(data_nplcm_list, function(l) l$Mobs$MBS$MBS1))[data_nplcm_order,]),
MSS = list(MSS1 = Reduce(rbind, lapply(data_nplcm_list, function(l) l$Mobs$MSS$MSS1))[data_nplcm_order,]),
MGS=NULL),
Y = Reduce(c, lapply(data_nplcm_list, function(l) l$Y))[data_nplcm_order],
X = data.frame(SITE=Reduce(rbind, lapply(data_nplcm_list, function(l) l$X))[data_nplcm_order,]))
length(SS_object_1$patho
)
SS_object_1 <- make_meas_object(LETTERS[1:3],"MSS","1","SS",cause_list) #silver standard
BrS_object_1 <- make_meas_object(LETTERS[1:J],"MBS","1","BrS",cause_list) # bronze standard
SS_object_1 <- make_meas_object(LETTERS[1:3],"MSS","1","SS",cause_list) #silver standard
model_options <- list(likelihood = list(cause_list = cause_list,              # <---- fitted causes.
k_subclass = c(1),                    # <---- no. of subclasses.
Eti_formula = ~ -1 + as.factor(SITE) , # <---- etiology regression formula; only for cases.
FPR_formula = list(
MBS1 =  ~ -1 +as.factor(SITE))),     # change from as.factor(SITE) to site for only one site
use_measurements = c("BrS","SS"),                       # <---- which measurements to use to inform etiology
prior = list(
Eti_prior = t(sapply(1:N.SITE, function(i) overall_uniform(1, cause_list))), # <--- here we are specifying the distribution for the etiology priors
TPR_prior = list(
BrS  = list(info = "informative", ## try with beta(6,2)
input = "direct_beta_param", # change to beta(1,1) or beta(2,1)
val = list(MBS1 = list(alpha = list(rep(6,6)),
beta  = list(rep(2,6))))),
SS = list(info  = "informative",
input = "match_range",
val   = list(
MSS1 = list(up = list(rep(0.3,length(SS_object_1$patho))),
low = list(rep(0.1,length(SS_object_1$patho))))))
)  # <---- TPR prior.
)
)
assign_model(model_options,data_nplcm)
length(SS_object_1$patho)
# parent directory for testing code (LOCAL):
working_dir <- tempdir()
# date stamp for analysis:
Date <- gsub("-", "_", Sys.Date())
# include stratification information in file name:
dated_strat_name <- paste0(working_dir,Date,"_discrete_predictor")
# create folder
result_folder <- dated_strat_name
dir.create(result_folder)
# options for MCMC chains:
mcmc_options <- list(debugstatus = TRUE,
n.chains   = 1, # number of Markov chains
n.itermcmc = as.integer(10000), # how many total iterations
n.burnin   = as.integer(5000), # how many iterations to throw away
n.thin     = 10, #thin every 10th draw from the sequence
individual.pred = !TRUE, #what does this mean?
ppd             = !TRUE,
get.pEti        = !TRUE,
result.folder = result_folder,
bugsmodel.dir = result_folder,
jags.dir = "",
use_jags = TRUE)
##----------------------------
###  function for simulation replicates   ###
##----------------------------
run_many_simulations <- function(run_times, data_nplcm,model_options, mcmc_options,
etiology_allsites, N.SITE, Jcause){
# create an array with # of dimensions corresponding to # of runs that will store the coverage indicators
coverage_counts <- array(c(rep(0,N.SITE), rep(0,Jcause)),dim = c(N.SITE,Jcause,run_times))
# create an array with # of dimensions corresponding to # of runs that will store mean/SD
posteriorSampMeans <- array(c(rep(0,N.SITE), rep(0,Jcause)),dim = c(N.SITE, Jcause,run_times)) ## means of posterior samples
posteriorSampSDs <- array(c(rep(0,N.SITE), rep(0,Jcause)),dim = c(N.SITE, Jcause,run_times)) ## SD of posterior samples
resNPLCM <- list()
posteriorSamples <- list() ## save the values of the posterior samples
# fix this later: posteriorPlots <- list() ## save the histograms of the posterior samples
rjags::load.module("glm")
for(run in 1:run_times){
gs <- nplcm(data_nplcm,model_options,mcmc_options)
DIR_NPLCM <- result_folder
new_env   <- new.env()
source(file.path(DIR_NPLCM,"jagsdata.txt"),local=new_env)
bugs.dat <- as.list(new_env)
rm(new_env)
res_nplcm <- coda::read.coda(file.path(DIR_NPLCM,"CODAchain1.txt"),
file.path(DIR_NPLCM,"CODAindex.txt"),
quiet=TRUE)
n_samp_kept   <- nrow(res_nplcm)      # number of posterior sample after burn-in
Jcause        <- bugs.dat$Jcause      # number of causes
Nd            <- bugs.dat$Nd          # case size
Nu            <- bugs.dat$Nu          # control size
n_unique_Eti_level <- bugs.dat$n_unique_Eti_level  # number of stratums
get_res <- function(x)res_nplcm[,grep(x,colnames(res_nplcm))]
## save the posterior samples of the model
resNPLCM[[run]] <- res_nplcm
# check if the model did actually run correctly:
Eti_prob_scale <- array(get_res("pEti"),c(n_samp_kept,n_unique_Eti_level,Jcause))
if(length(Eti_prob_scale)==0){
stop("Your model didn't run successfully!")
}
print(paste0("Number of Iterations:", run))
#posteriorSamples[[run]] <- Eti_prob_scale
### uncomment if you want the histogram plots
# marginalized posterior etiology over all sites using user-defined weights
#user_weight <- rep(1/N.SITE,N.SITE) # c(0.3,0.2,0.1,0.1,0.1,0.1,0.1)
#Eti_overall_usr_weight <- apply(Eti_prob_scale,1,function(S) t(S)%*%matrix(user_weight,ncol=1))
#
#
# fix this later:
# plot posterior distribution for etiology probability
# par(mfcol=c(1,1))
# for (j in 1:Jcause){
#   for (site in 1:n_unique_Eti_level){
#     hist(Eti_prob_scale[,site,j],xlim=c(0,1),breaks="Scott",freq=FALSE,main="",xlab="")
#     abline(v = etiology_allsites[[site]][[j]], col="blue", lwd=3, lty=2)
#     mtext(text = paste0('SITE',levels(as.factor(data_nplcm$X$SITE))[site],": ",cause_list[j]),3,-1,cex=1,adj = 0.9)
#     if (j==1){
#       mtext(paste0(round(user_weight[site],4)),2,5,cex=1,col="blue",las=1)
#       if (site==5) {mtext("User-specified weight towards overall pie:", 2,12, cex=1)}
#     }
#   }
#   hist(Eti_overall_usr_weight[j,],xlim=c(0,1),breaks="Scott",freq=FALSE,main="",col="blue",
#        xlab="Etiology")
#   mtext(text = paste0("Overall: ",cause_list[j]),3,adj=0.9,cex=1,col="blue")
# }
# posteriorPlots[[run]] <- recordPlot()
## function that checks for each site and cause if the truth is covered by the 95% quantile of the posterior distribution
for(j in 1:Jcause){
for(site in 1:N.SITE){
posteriorSampMeans[site, j,run] <- round(mean(Eti_prob_scale[,site,j]), 4)
posteriorSampSDs[site, j, run] <- round(sd(Eti_prob_scale[,site,j]), 4)
truth_value <- etiology_allsites[[site]][[j]] # this is the true etiology value for the ith pathogen
if((truth_value>=quantile(Eti_prob_scale[, site,j], probs=c(0.02, 0.975))[1])&(truth_value<=quantile(Eti_prob_scale[,site,j], probs=c(0.02, 0.975))[2])){ # check if the true value is covered by the 95% quantile
coverage_counts[site,j,run] <- 1 # if it is, assign 1
} else {
coverage_counts[site,j,run] <- 0  #assign zero if true value is not covered
}
}
}
}
simulationResults <- list("coverage_counts" = coverage_counts, "posteriorSampMeans" = posteriorSampMeans,
"posteriorSampSDs" = posteriorSampSDs,"resNPLCM" = resNPLCM  #, "posteriorPlots" = posteriorPlots,#"posteriorSamples" = posteriorSamples
)
return(simulationResults)
}
ptm <- proc.time()
set.seed(03192019)
simulationResults<- run_many_simulations(run_times = 1, data_nplcm,model_options,  mcmc_options, etiology_allsites, N.SITE = 7, Jcause = 6)
proc.time() - ptm
load("/Users/irena/Downloads/RegressionDiscreteR_100.RData")
rowSums(simulationResults$coverage_counts, dims=1)
rowSums(simulationResults$coverage_counts, dims=2)
