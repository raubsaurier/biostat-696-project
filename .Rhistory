asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.00001, "sigma.sq"=0.0005, "tau.sq"=0.00001, beta=c(rep(0.000001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.003, 0.1), "sigma.sq.IG"=c(20, 6),
"tau.sq.IG"=c(20, 6),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
samps <- mcmc.list(asthmaBayes$p.beta.theta.samples)
effectiveSize(samps)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.00001, "sigma.sq"=0.0005, "tau.sq"=0.00001, beta=c(rep(0.000001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.003, 0.1), "sigma.sq.IG"=c(20, 10),
"tau.sq.IG"=c(20, 10),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
## effective sample size for each variable:
samps <- mcmc.list(asthmaBayes$p.beta.theta.samples)
effectiveSize(samps)
## Trace plots of the parameters
par(mai=rep(0.5,4))
plot(asthmaBayes$p.beta.theta.samples)
## effective sample size for each variable:
samps <- mcmc.list(asthmaBayes$p.beta.theta.samples)
effectiveSize(samps)
## we are looking to see if the mean of the chains for each variable has converged
heidel.diag(samps, eps=0.1, pvalue=0.05)
## Geweke diagnostic:
geweke.diag(samps, frac1=0.1, frac2=0.5)
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.00001, "sigma.sq"=0.005, "tau.sq"=0.00001, beta=c(rep(0.000001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.003, 0.1), "sigma.sq.IG"=c(20, 10),
"tau.sq.IG"=c(20, 10),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.00001, "sigma.sq"=0.005, "tau.sq"=0.0001, beta=c(rep(0.000001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.003, 0.1), "sigma.sq.IG"=c(20, 10),
"tau.sq.IG"=c(20, 10),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.0001, "sigma.sq"=0.005, "tau.sq"=0.0001, beta=c(rep(0.000001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.003, 0.1), "sigma.sq.IG"=c(20, 10),
"tau.sq.IG"=c(20, 10),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.0001, "sigma.sq"=0.005, "tau.sq"=0.0001, beta=c(rep(0.00001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.003, 0.1), "sigma.sq.IG"=c(20, 10),
"tau.sq.IG"=c(20, 10),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
## effective sample size for each variable:
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.0001, "sigma.sq"=0.005, "tau.sq"=0.0001, beta=c(rep(0.0001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.003, 0.1), "sigma.sq.IG"=c(20, 10),
"tau.sq.IG"=c(20, 10),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
## set up the model
n.batch <- 1000
batch.length <- 200
n.samples = n.batch*batch.length
burn.in <- 0.5*n.samples
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.0001, "sigma.sq"=0.005, "tau.sq"=0.0001, beta=c(rep(0.0001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.003, 0.1), "sigma.sq.IG"=c(20, 10),
"tau.sq.IG"=c(20, 10),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
## set up the model
n.batch <- 1000
batch.length <- 100
n.samples = n.batch*batch.length
burn.in <- 0.5*n.samples
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.0001, "sigma.sq"=0.005, "tau.sq"=0.0001, beta=c(rep(0.0001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.003, 0.1), "sigma.sq.IG"=c(20, 10),
"tau.sq.IG"=c(20, 10),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
## effective sample size for each variable:
samps <- mcmc.list(asthmaBayes$p.beta.theta.samples)
effectiveSize(samps)
## we are looking to see if the mean of the chains for each variable has converged
heidel.diag(samps, eps=0.1, pvalue=0.05)
## Geweke diagnostic:
geweke.diag(samps, frac1=0.1, frac2=0.5)
## Trace plots of the parameters
par(mai=rep(0.5,4))
plot(asthmaBayes$p.beta.theta.samples)
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.0001, "sigma.sq"=0.0005, "tau.sq"=0.0001, beta=c(rep(0.0001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.003, 0.1), "sigma.sq.IG"=c(100, 10),
"tau.sq.IG"=c(50, 10),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.0001, "sigma.sq"=0.0005, "tau.sq"=0.0001, beta=c(rep(0.00001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.003, 0.1), "sigma.sq.IG"=c(100, 10),
"tau.sq.IG"=c(50, 10),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
## effective sample size for each variable:
samps <- mcmc.list(asthmaBayes$p.beta.theta.samples)
effectiveSize(samps)
## set up the model
n.batch <- 1000
batch.length <- 100
n.samples = n.batch*batch.length
burn.in <- 0.5*n.samples
## effective sample size for each variable:
samps <- mcmc.list(asthmaBayes$p.beta.theta.samples)
effectiveSize(samps)
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.0001, "sigma.sq"=0.0005, "tau.sq"=0.0001, beta=c(rep(0.00001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.003, 0.1), "sigma.sq.IG"=c(100, 10),
"tau.sq.IG"=c(50, 10),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
## effective sample size for each variable:
samps <- mcmc.list(asthmaBayes$p.beta.theta.samples)
effectiveSize(samps)
## we are looking to see if the mean of the chains for each variable has converged
heidel.diag(samps, eps=0.1, pvalue=0.05)
## Geweke diagnostic:
geweke.diag(samps, frac1=0.1, frac2=0.5)
## Trace plots of the parameters
par(mai=rep(0.5,4))
plot(asthmaBayes$p.beta.theta.samples)
## set up the model
n.batch <- 1000
batch.length <- 100
n.samples = n.batch*batch.length
burn.in <- 0.5*n.samples
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.0001, "sigma.sq"=0.0005, "tau.sq"=0.0001, beta=c(rep(0.00001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.001, 0.08), "sigma.sq.IG"=c(100, 10),
"tau.sq.IG"=c(50, 10),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
## effective sample size for each variable:
samps <- mcmc.list(asthmaBayes$p.beta.theta.samples)
effectiveSize(samps)
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.0001, "sigma.sq"=0.00001, "tau.sq"=0.0001, beta=c(rep(0.00001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.001, 0.08), "sigma.sq.IG"=c(100, 10),
"tau.sq.IG"=c(50, 10),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
## effective sample size for each variable:
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.00001, "sigma.sq"=0.00001, "tau.sq"=0.0001, beta=c(rep(0.00001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.001, 0.08), "sigma.sq.IG"=c(100, 10),
"tau.sq.IG"=c(50, 10),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
## effective sample size for each variable:
samps <- mcmc.list(asthmaBayes$p.beta.theta.samples)
effectiveSize(samps)
?spGLM
?krige.control
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.00001, "sigma.sq"=0.00001, "tau.sq"=0.0001, beta=c(rep(0.00001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.001, 0.08), "sigma.sq.IG"=c(100, 10),
"tau.sq.IG"=c(50, 10),"beta.norm"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.00001, "sigma.sq"=0.00001, "tau.sq"=0.0001, beta=c(rep(0.00001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.001, 0.08), "sigma.sq.IG"=c(100, 10),
"tau.sq.IG"=c(50, 10),"beta.norm"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
## effective sample size for each variable:
samps <- mcmc.list(asthmaBayes$p.beta.theta.samples)
effectiveSize(samps)
## Trace plots of the parameters
par(mai=rep(0.5,4))
plot(asthmaBayes$p.beta.theta.samples)
## we are looking to see if the mean of the chains for each variable has converged
heidel.diag(samps, eps=0.1, pvalue=0.05)
## Geweke diagnostic:
geweke.diag(samps, frac1=0.1, frac2=0.5)
## we are looking to see if the mean of the chains for each variable has converged
heidel.diag(samps, eps=0.1, pvalue=0.05)
## Geweke diagnostic:
geweke.diag(samps, frac1=0.1, frac2=0.5)
?heidel.diag
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.00001, "sigma.sq"=0.00001, "tau.sq"=0.0001, beta=c(rep(0.00001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.001, 0.08), "sigma.sq.IG"=c(10, 10),
"tau.sq.IG"=c(10, 10),"beta.norm"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
## set up the model
n.batch <- 1000
batch.length <- 1000
n.samples = n.batch*batch.length
burn.in <- 0.5*n.samples
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.00001, "sigma.sq"=0.00001, "tau.sq"=0.0001, beta=c(rep(0.00001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.001, 0.08), "sigma.sq.IG"=c(10, 10),
"tau.sq.IG"=c(10, 10),"beta.norm"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
## effective sample size for each variable:
samps <- mcmc.list(asthmaBayes$p.beta.theta.samples)
effectiveSize(samps)
n.pred <- 18
pred_coords <- as.matrix(cbind(asthma_pred$lat, asthma_pred$long))
# the variables for the 18 sites
asthma.predcov <- matrix(cbind(rep(1, n.pred), asthma_pred$obesity_rate_2016,  asthma_pred$pct_daily_smokers, asthma_pred$meanAQI.Ozone, asthma_pred$meanAQI.Other,
asthma_pred$pct_black),nrow=n.pred,ncol=6)
# get the predictions at the 20 selected sites
set.seed(03012019)
bayesian_pred <- spPredict(asthmaBayes, pred.coords=coords, pred.covars=asthma.predcov, start=burn.in, verbose = FALSE, n.report=5000)
## posterior mean of the predictions
post.pred.mean <- rowMeans(bayesian_pred$p.y.predictive.samples)
post.pred.mean[1:n.pred]
# we would like to predict asthma rates for the states without asthma data
asthma_pred <- asthma_model[is.na(asthma_model$asthma_count)]
#
# # the locations of the observations we want to predict on
lat0 <- asthma_pred$lat
long0 <-asthma_pred$long
#
pred_coords <- as.matrix(cbind(lat0, long0))
#### -----------------------------------------
n.pred <- 18
pred_coords <- as.matrix(cbind(asthma_pred$lat, asthma_pred$long))
# the variables for the 18 sites
asthma.predcov <- matrix(cbind(rep(1, n.pred), asthma_pred$obesity_rate_2016,  asthma_pred$pct_daily_smokers, asthma_pred$meanAQI.Ozone, asthma_pred$meanAQI.Other,
asthma_pred$pct_black),nrow=n.pred,ncol=6)
# get the predictions at the 20 selected sites
set.seed(03012019)
bayesian_pred <- spPredict(asthmaBayes, pred.coords=coords, pred.covars=asthma.predcov, start=burn.in, verbose = FALSE, n.report=5000)
## posterior mean of the predictions
post.pred.mean <- rowMeans(bayesian_pred$p.y.predictive.samples)
post.pred.mean[1:n.pred]
post.pred.median <- apply(bayesian_pred$p.y.predictive.samples,1,median)
post.pred.median[1:n.pred]
## 90% posterior predictive intervals
post.pred.90ci <- apply(bayesian_pred$p.y.predictive.samples,1,quantile,c(0.05,0.95))
post.pred.90ci[,1:n.pred]
1.172641e+06 2.872214e+05 4.972830e+06 5.345692e+23 1.165453e+09 1.242912e+33 0.000000e+00
[17] 7.792441e+16 3.773409e+14
3.773409e+14
?spPredict
asthmaBayes$acceptance
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.00001, "sigma.sq"=0.00001, "tau.sq"=0.0001, beta=c(rep(0.00001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.001, 0.08), "sigma.sq.IG"=c(100, 1),
"tau.sq.IG"=c(100, 1),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
## effective sample size for each variable:
samps <- mcmc.list(asthmaBayes$p.beta.theta.samples)
effectiveSize(samps)
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=1000, nugget=500, range=3000, "Sph"),fit.method=2)
sph.variog
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,sph.variog, main="Exponential Semi-Variogram"))
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=1000, nugget=500, range=3000, "Sph"),fit.method=2)
sph.variog
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,sph.variog, main="Spherical Semi-Variogram"))
sph.variog <- fit.variogram(emp.variog,vgm(psill=1000, nugget=500, range=3000, "Gau"),fit.method=2)
sph.variog
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=1000, nugget=500, range=3000, "Mat"),fit.method=2)
sph.variog
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,sph.variog, main="Spherical Semi-Variogram"))
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=1000, nugget=500, range=3000, "Gau"),fit.method=2)
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=1000, nugget=500, "Gau"),fit.method=2)
sph.variog
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=800, nugget=1000, "Gau"),fit.method=2)
sph.variog
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=300, nugget=1000, "Gau"),fit.method=2)
sph.variog
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=1000, nugget=700, "Gau"),fit.method=2)
sph.variog
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=700, nugget=600, "Gau"),fit.method=2)
sph.variog
# make a plot of the empirical semi-variogram with t
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=700, nugget=600, "Sph"),fit.method=2)
sph.variog
print(plot(emp.variog,sph.variog, main="Spherical Semi-Variogram"))
## specify the initial values for the parameters
beta.init <- loglinear_model$coefficients# use the estimates of beta from our loglinear GLM model
sigma2.init <- exp.variog$psill[2]
phi.init <- 1/exp.variog$range[2] # range
tau2.init <- exp.variog$psill[1]  #we want to include a nugget effect
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=700, nugget=700, "Sph"),fit.method=2)
sph.variog
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,sph.variog, main="Spherical Semi-Variogram"))
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=700, nugget=700, "Exp"),fit.method=2)
sph.variog
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,sph.variog, main="Spherical Semi-Variogram"))
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=700, nugget=700, "Exp"),fit.method=2)
sph.variog
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,sph.variog, main="Spherical Semi-Variogram"))
## specify the initial values for the parameters
beta.init <- loglinear_model$coefficients# use the estimates of beta from our loglinear GLM model
sigma2.init <- exp.variog$psill[2]
phi.init <- 1/exp.variog$range[2] # range
tau2.init <- exp.variog$psill[1]  # if we want a nugget effect
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=1000, nugget=700, "Exp"),fit.method=2)
sph.variog
# make a plot of the empirical semi-variogram wit
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=900, nugget=700, "Exp"),fit.method=2)
sph.variog
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,sph.variog, main="Spherical Semi-Variogram"))
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=2500, "Exp"),fit.method=2)
sph.variog
# fit an exponential variogram
sph.variog <- fit.variogram(emp.variog,vgm(psill=2000, nugget=500,"Exp"),fit.method=2)
sph.variog
# fit an exponential variogram
exp.variog <- fit.variogram(emp.variog,vgm(psill=2000, nugget=500,"Exp"),fit.method=2)
exp.variog
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,exp.variog, main="Computed Semi-Variogram"))
exp.variog <- fit.variogram(emp.variog,vgm(psill=1000, nugget=500,"Exp"),fit.method=2)
exp.variog
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,exp.variog, main="Exponential Semi-Variogram"))
# fit an exponential variogram
exp.variog <- fit.variogram(emp.variog,vgm(psill=1000, nugget=500,"Exp"),fit.method=2)
exp.variog
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,exp.variog, main="Exponential Semi-Variogram"))
# fit an exponential variogram
exp.variog <- fit.variogram(emp.variog,vgm(psill=800, nugget=500,"Exp"),fit.method=2)
exp.variog
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,exp.variog, main="Exponential Semi-Variogram"))
# fit an exponential variogram
exp.variog <- fit.variogram(emp.variog,vgm(psill=800, nugget=800,"Exp"),fit.method=2)
exp.variog
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,exp.variog, main="Exponential Semi-Variogram"))
## specify the initial values for the parameters
beta.init <- loglinear_model$coefficients# use the estimates of beta from our loglinear GLM model
sigma2.init <- exp.variog$psill[2]
phi.init <- 1/exp.variog$range[2] # range
tau2.init <- exp.variog$psill[1]  # if we want a nugget effect
## Geweke diagnostic:
geweke.diag(samps, frac1=0.1, frac2=0.5)
vario.fit <- fit.variogram(emp.variog, vgm(psill=max(vario$gamma)*0.9, model = "Sph", range=max(vario$dist)/2, nugget = mean(vario$gamma)/4))
vario.fit <- fit.variogram(emp.variog, vgm(psill=max(emp.variog$gamma)*0.9, model = "Sph", range=max(emp.variog$dist)/2, nugget = mean(emp.variog$gamma)/4))
vario.fit
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,vario.fit, main="Spherical Semi-Variogram"))
vario.fit <- fit.variogram(emp.variog, vgm(psill=max(emp.variog$gamma)*0.9, model = "Exp", range=max(emp.variog$dist)/2, nugget = mean(emp.variog$gamma)/4))
vario.fit
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,vario.fit, main="Exp Semi-Variogram"))
vario.fit <- fit.variogram(emp.variog, vgm(psill=max(emp.variog$gamma)*0.9, model = "Gau", range=max(emp.variog$dist)/2, nugget = mean(emp.variog$gamma)/4))
vario.fit
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,vario.fit, main="Exp Semi-Variogram"))
emp.variog$gamma
vario.fit <- fit.variogram(emp.variog, vgm(psill=max(emp.variog$gamma)*0.9, model = "Mat", range=max(emp.variog$dist)/2, nugget = mean(emp.variog$gamma)/4))
vario.fit
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,vario.fit, main="Exp Semi-Variogram"))
emp.variog <- variogram(loglinResids~1,locations=~x.dist+y.dist, data=residData, cutoff=6000)
plot(emp.variog, main="Empirical Semi-Variogram of the Log-Linear Residuals")
emp.variog <- variogram(loglinResids~1,locations=~x.dist+y.dist, data=residData, cutoff=10000)
plot(emp.variog, main="Empirical Semi-Variogram of the Log-Linear Residuals")
emp.variog <- variogram(loglinResids~1,locations=~x.dist+y.dist, data=residData, cutoff=12000)
plot(emp.variog, main="Empirical Semi-Variogram of the Log-Linear Residuals")
vario.fit <- fit.variogram(emp.variog, vgm(psill=max(emp.variog$gamma)*0.9, model = "Mat", range=max(emp.variog$dist)/2, nugget = mean(emp.variog$gamma)/4))
vario.fit
vario.fit <- fit.variogram(emp.variog, vgm(psill=max(emp.variog$gamma)*0.9, model = "Exp", range=max(emp.variog$dist)/2, nugget = mean(emp.variog$gamma)/4))
vario.fit
emp.variog <- variogram(loglinResids~1,locations=~x.dist+y.dist, data=residData, cutoff=10000)
plot(emp.variog, main="Empirical Semi-Variogram of the Log-Linear Residuals")
vario.fit <- fit.variogram(emp.variog, vgm(psill=max(emp.variog$gamma)*0.9, model = "Exp", range=max(emp.variog$dist)/2, nugget = mean(emp.variog$gamma)/4))
vario.fit
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,vario.fit, main="Exp Semi-Variogram"))
vario.fit <- fit.variogram(emp.variog, vgm(psill=max(emp.variog$gamma)*0.9, model = "Gau", range=max(emp.variog$dist)/2, nugget = mean(emp.variog$gamma)/4))
vario.fit
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,vario.fit, main="Exp Semi-Variogram"))
vario.fit <- fit.variogram(emp.variog, vgm(psill=max(emp.variog$gamma)*0.9, model = "Sph", range=max(emp.variog$dist)/2, nugget = mean(emp.variog$gamma)/4))
vario.fit
# make a plot of the empirical semi-variogram with the exponential semi-variogram overlayed
print(plot(emp.variog,vario.fit, main="Sph Semi-Variogram"))
## specify the initial values for the parameters
beta.init <- loglinear_model$coefficients# use the estimates of beta from our loglinear GLM model
sigma2.init <- exp.variog$psill[2]
phi.init <- 1/exp.variog$range[2] # range
tau2.init <- exp.variog$psill[1]  # if we want a nugget effect
## specify the initial values for the parameters
beta.init <- loglinear_model$coefficients# use the estimates of beta from our loglinear GLM model
sigma2.init <- vario.fit$psill[2]
phi.init <- 1/vario.fit$range[2] # range
tau2.init <- vario.fit$psill[1]  # if we want a nugget effect
## set up the model
n.batch <- 1000
batch.length <- 1000
n.samples = n.batch*batch.length
burn.in <- 0.5*n.samples
# for reproducibility
set.seed(20190301)
## fit a Bayesian GLM
asthmaBayes <- spGLM(asthma_count ~obesity_rate_2016 + pct_daily_smokers + meanAQI.Ozone + meanAQI.Other + pct_black
, weights = total_child_pop, family="poisson",
coords=coords,starting=list("phi"=phi.init,"sigma.sq"=sigma2.init, "tau.sq"=tau2.init,"beta"=beta.init, "w"=0),
tuning=list("phi"=0.00001, "sigma.sq"=0.00001, "tau.sq"=0.0001, beta=c(rep(0.00001, length(beta.init))), "w"=0.00001), #tried several different values of the tuning to make the trace plots look nicer
priors=list("phi.Unif"=c(0.0001, 0.08), "sigma.sq.IG"=c(100, 1),
"tau.sq.IG"=c(100, 1),"beta.Flat"), cov.model="exponential",n.samples=n.samples, verbose=TRUE, n.report=0.2*n.samples)
### diagnostics for convergence
attr(emp.variog)
attr(emp.variog, "SSErr")
attr(exp.variog, "SSErr")
attr(vario.fit, "SSErr")
?variogram
?fit.variogram
